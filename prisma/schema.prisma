// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/*
  npx prisma generate 
  npx prisma db push
  
*/

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MODERATOR
  MANAGER
  LEADER
  MEAL_MANAGER
  ACCOUNTANT
  MARKET_MANAGER
  MEMBER
  GUEST
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum PaymentMethod {
  CASH
  BKASH
  NAGAD
  ROCKET
  BANK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MarketStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum VoteType {
  ROOM_LEADER
  MARKET_MANAGER
  MEAL_MANAGER
  ACCOUNTANT
  MEAL_CHOICE
  GROUP_DECISION
}

enum NotificationType {
  MEAL_ADDED
  MEAL_UPDATED
  PAYMENT_RECEIVED
  PAYMENT_APPROVED
  PAYMENT_REJECTED
  SHOPPING_ADDED
  GUEST_MEAL_ADDED
  EXTRA_EXPENSE_ADDED
  VOTE_STARTED
  VOTE_ENDED
  MARKET_DATE_UPDATED
  ROLE_CHANGED
  MEMBER_ADDED
  MEMBER_REMOVED
  GENERAL
}

enum ExpenseType {
  FOOD
  UTILITY
  RENT
  OTHER
}

/// USER MODEL
model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  role             Role             @default(MEMBER)
  language         String           @default("en")
  isActive         Boolean          @default(true)
  resetToken       String?          
  resetTokenExpiry DateTime?

  // RELATIONS
  accounts         Account[]
  bkashPayments    BkashPayment[]
  createdRooms     Room[]         @relation("RoomCreator")
  extraExpenses    ExtraExpense[]
  guestMeals       GuestMeal[]
  marketDates      MarketDate[]
  meals            Meal[]
  notifications    Notification[]
  payments         Payment[]
  rooms            RoomMember[]
  sessions         Session[]
  shoppingItems    ShoppingItem[]
  votes            Vote[]
  createdInvitations Invitation[] @relation("CreatedInvitations")
  usedInvitations   Invitation[]  @relation("UsedInvitations")

  @@index([role, isActive])
  @@index([resetToken])
  @@index([emailVerified, isActive])
  @@index([createdAt])
}

/// ROOM MODEL
model Room {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  password      String?        @db.String
  isPrivate     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  fineAmount    Float          @default(0)
  fineEnabled   Boolean        @default(false)
  createdBy     String         @db.ObjectId
  maxMembers    Int?           @default(20)
  memberCount   Int            @default(0)
  bannerUrl     String?
  createdByUser User           @relation("RoomCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  // RELATIONS
  bkashPayments BkashPayment[]
  extraExpenses ExtraExpense[]
  guestMeals    GuestMeal[]
  marketDates   MarketDate[]
  meals         Meal[]
  payments      Payment[]
  members       RoomMember[]
  shopping      ShoppingItem[]
  votes         Vote[]
  invitations   Invitation[]

  @@index([isActive])
  @@index([createdAt])
}

/// ROOM MEMBER MODEL
model RoomMember {
  id         String   @id @default(auto())  @map("_id") @db.ObjectId
  role       Role     @default(MEMBER)
  joinedAt   DateTime @default(now())
  userId     String   @db.ObjectId
  roomId     String   @db.ObjectId
  isCurrent  Boolean  @default(false)

  lastActive DateTime? @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

 @@unique([userId, roomId])
  @@index([roomId, role])
  @@index([joinedAt])
  @@index([isCurrent])
}

/// ACCOUNT MODEL
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// SESSION MODEL
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// VERIFICATION TOKEN MODEL
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())


  @@unique([identifier, token])
}

/// MEAL MODEL
model Meal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  type      MealType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId, date, type])
  @@index([roomId, date])
  @@index([userId, date])
  @@index([type, date])
}

/// GUEST MEAL MODEL
model GuestMeal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  type      MealType
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, date])
  @@index([userId, date])
}

/// SHOPPING ITEM MODEL
model ShoppingItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  date        DateTime
  receiptUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  roomId      String   @db.ObjectId

  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, date])
  @@index([amount])
  @@index([userId, date])
}

/// PAYMENT MODEL
model Payment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  date         DateTime
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String        @db.ObjectId
  roomId       String        @db.ObjectId
  bkashPayment BkashPayment?

  room         Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, status, date])
  @@index([userId, status, date])
  @@index([method, status])
}

/// BKASH PAYMENT MODEL
model BkashPayment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentId       String   @unique
  invoiceId       String
  amount          Float
  status          String
  trxId           String?
  customerMsisdn  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @db.ObjectId
  roomId          String   @db.ObjectId
  paymentRecordId String   @db.ObjectId @unique

  paymentRecord   Payment  @relation(fields: [paymentRecordId], references: [id], onDelete: Cascade)
  room            Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

/// MARKET DATE MODEL
model MarketDate {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  status    MarketStatus @default(UPCOMING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String       @db.ObjectId
  roomId    String       @db.ObjectId

  room      Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// EXTRA EXPENSE MODEL
model ExtraExpense {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  date        DateTime
  type        ExpenseType @default(OTHER)
  receiptUrl  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @db.ObjectId
  roomId      String      @db.ObjectId

  room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  email     String
  role      Role
  expiresAt DateTime
  usedAt    DateTime?
  usedBy    String?  @db.ObjectId
  groupId   String   @db.ObjectId
  createdBy String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group     Room     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User     @relation("CreatedInvitations", fields: [createdBy], references: [id], onDelete: Cascade)
  user      User?    @relation("UsedInvitations", fields: [usedBy], references: [id])

  @@unique([code, groupId])
  @@index([email])
  @@index([expiresAt])
  @@index([usedAt])
  @@index([createdAt])
}

/// VOTE MODEL
model Vote {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  type         VoteType
  // Vote configuration
  title        String?
  description  String?
  startDate    DateTime  @default(now())
  endDate      DateTime
  isActive     Boolean   @default(true)
  userId       String    @db.ObjectId
  roomId       String    @db.ObjectId
  candidateId  String?   @db.ObjectId
  options      String?   // Store as JSON string
  results      String?   // Store as JSON string
  isAnonymous  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId, type])
  @@index([roomId, type, candidateId])
  @@index([createdAt])
}

/// NOTIFICATION MODEL
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String           @db.ObjectId

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}