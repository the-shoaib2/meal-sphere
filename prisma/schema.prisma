// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/*
  npx prisma generate 
  npx prisma db push
  
*/

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
  MANAGER
  LEADER
  MEAL_MANAGER
  ACCOUNTANT
  MARKET_MANAGER
  MEMBER
  BANNED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum PaymentMethod {
  CASH
  BKASH
  NAGAD
  ROCKET
  BANK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MarketStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum VoteType {
  ROOM_LEADER
  MARKET_MANAGER
  MEAL_MANAGER
  ACCOUNTANT
  MEAL_CHOICE
  GROUP_DECISION
}

enum NotificationType {
  MEMBER_ADDED
  MEMBER_REMOVED
  MEAL_CREATED
  MEAL_UPDATED
  MEAL_DELETED
  PAYMENT_CREATED
  PAYMENT_UPDATED
  PAYMENT_DELETED
  JOIN_REQUEST_APPROVED
  JOIN_REQUEST_REJECTED
}

enum ExpenseType {
  FOOD
  UTILITY
  RENT
  OTHER
  DAILY_EXPENSE
  INTERNET
  CLEANING
  MAINTENANCE
}



/// USER MODEL
model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  role             Role             @default(MEMBER)
  language         String           @default("en")
  isActive         Boolean          @default(true)
  resetToken       String?          
  resetTokenExpiry DateTime?

  // RELATIONS
  accounts         Account[]
  bkashPayments    BkashPayment[]
  createdRooms     Room[]         @relation("RoomCreator")
  extraExpenses    ExtraExpense[]
  guestMeals       GuestMeal[]
  marketDates      MarketDate[]
  meals            Meal[]
  notifications    Notification[]
  payments         Payment[]
  rooms            RoomMember[]
  sessions         Session[]
  shoppingItems    ShoppingItem[]
  votes            Vote[]
  createdInvitations Invitation[] @relation("CreatedInvitations")
  usedInvitations   Invitation[]  @relation("UsedInvitations")
  joinRequests      JoinRequest[]
  messages          GroupMessage[]
  activityLogs      GroupActivityLog[]
  inviteTokens      InviteToken[]
  announcements     Announcement[] @relation("CreatedAnnouncements")
  groupNotificationSettings GroupNotificationSettings[]
  autoMealSettings  AutoMealSettings[]
  accountTransactionsSent AccountTransaction[] @relation("TransactionUser")
  accountTransactionsReceived AccountTransaction[] @relation("TransactionTarget")
  accountTransactionsCreated AccountTransaction[] @relation("TransactionCreator")

  @@index([role, isActive])
  @@index([resetToken])
  @@index([emailVerified, isActive])
  @@index([createdAt])
}

/// ROOM MODEL
model Room {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  isPrivate     Boolean  @default(false)
  memberCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @db.ObjectId
  isActive      Boolean  @default(true)
  fineAmount    Float?
  fineEnabled   Boolean  @default(false)
  maxMembers    Int?
  bannerUrl     String?
  category      String?
  tags          String[]
  features      Json?    // Store features as JSON
  createdByUser User     @relation("RoomCreator", fields: [createdBy], references: [id])
  members       RoomMember[]
  joinRequests  JoinRequest[]
  messages      GroupMessage[]
  announcements Announcement[]
  activityLogs  GroupActivityLog[]
  shoppingItems ShoppingItem[]
  meals         Meal[]
  payments      Payment[]
  votes         Vote[]
  invitations   Invitation[]
  bkashPayments BkashPayment[]
  extraExpenses ExtraExpense[]
  guestMeals    GuestMeal[]
  marketDates   MarketDate[]
  inviteTokens  InviteToken[]
  groupNotificationSettings GroupNotificationSettings[]
  mealSettings  MealSettings?
  autoMealSettings AutoMealSettings[]
  accountTransactions AccountTransaction[]

  @@index([isActive])
  @@index([createdAt])
  @@index([category])
}

/// ROOM MEMBER MODEL
model RoomMember {
  id         String   @id @default(auto())  @map("_id") @db.ObjectId
  role       Role     @default(MEMBER)
  joinedAt   DateTime @default(now())
  userId     String   @db.ObjectId
  roomId     String   @db.ObjectId
  isCurrent  Boolean  @default(false)
  isBanned   Boolean  @default(false)
  lastActive DateTime? @updatedAt
  mutedUntil DateTime?
  permissions Json?    // Store custom permissions as JSON

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([roomId, role])
  @@index([joinedAt])
  @@index([isCurrent])
  @@index([isBanned])
}

/// ACCOUNT MODEL
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// SESSION MODEL
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// VERIFICATION TOKEN MODEL
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())


  @@unique([identifier, token])
}

/// MEAL MODEL
model Meal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  type      MealType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId, date, type])
  @@index([roomId, date])
  @@index([userId, date])
  @@index([type, date])
}

/// GUEST MEAL MODEL
model GuestMeal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  type      MealType
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, date])
  @@index([userId, date])
}

/// SHOPPING ITEM MODEL
model ShoppingItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  quantity    Int      @default(1)
  unit        String?
  purchased   Boolean  @default(false)
  date        DateTime @default(now())
  receiptUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  roomId      String   @db.ObjectId

  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([purchased])
  @@index([createdAt])
  @@index([userId])
}
/// PAYMENT MODEL
model Payment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  date         DateTime
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String        @db.ObjectId
  roomId       String        @db.ObjectId
  bkashPayment BkashPayment?

  room         Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, status, date])
  @@index([userId, status, date])
  @@index([method, status])
}

/// BKASH PAYMENT MODEL
model BkashPayment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentId       String   @unique
  invoiceId       String
  amount          Float
  status          String
  trxId           String?
  customerMsisdn  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @db.ObjectId
  roomId          String   @db.ObjectId
  paymentRecordId String   @db.ObjectId @unique

  paymentRecord   Payment  @relation(fields: [paymentRecordId], references: [id], onDelete: Cascade)
  room            Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

/// MARKET DATE MODEL
model MarketDate {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  status    MarketStatus @default(UPCOMING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String       @db.ObjectId
  roomId    String       @db.ObjectId

  room      Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// EXTRA EXPENSE MODEL
model ExtraExpense {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  date        DateTime
  type        ExpenseType @default(OTHER)
  receiptUrl  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @db.ObjectId
  roomId      String      @db.ObjectId

  room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  email     String
  role      Role
  expiresAt DateTime
  usedAt    DateTime?
  usedBy    String?  @db.ObjectId
  groupId   String   @db.ObjectId
  createdBy String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group     Room     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User     @relation("CreatedInvitations", fields: [createdBy], references: [id], onDelete: Cascade)
  user      User?    @relation("UsedInvitations", fields: [usedBy], references: [id])

  @@unique([code, groupId])
  @@index([email])
  @@index([expiresAt])
  @@index([usedAt])
  @@index([createdAt])
}

/// VOTE MODEL
model Vote {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  type         VoteType
  // Vote configuration
  title        String?
  description  String?
  startDate    DateTime  @default(now())
  endDate      DateTime
  isActive     Boolean   @default(true)
  userId       String    @db.ObjectId
  roomId       String    @db.ObjectId
  candidateId  String?   @db.ObjectId
  options      String?   // Store as JSON string
  results      String?   // Store as JSON string
  isAnonymous  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId, type])
  @@index([roomId, type, candidateId])
  @@index([createdAt])
}

/// NOTIFICATION MODEL
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String           @db.ObjectId

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

/// GROUP JOIN REQUEST MODEL
model JoinRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([status])
  @@index([createdAt])
}

/// GROUP MESSAGE MODEL
model GroupMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  pinned    Boolean  @default(false)
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, pinned])
  @@index([createdAt])
}

/// GROUP ACTIVITY LOG MODEL
model GroupActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // e.g., MEMBER_JOINED, SETTINGS_CHANGED, etc.
  details   Json?
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, type])
  @@index([createdAt])
}

model InviteToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  roomId    String   @db.ObjectId
  createdBy String   @db.ObjectId
  role      Role     @default(MEMBER)
  expiresAt DateTime?
  usedAt    DateTime?
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdByUser User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([token, roomId])
  @@index([roomId])
  @@index([createdAt])
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  roomId    String   @db.ObjectId
  createdBy String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation("CreatedAnnouncements", fields: [createdBy], references: [id])
}

model GroupNotificationSettings {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  groupId       String   @db.ObjectId
  groupMessages Boolean  @default(true)
  announcements Boolean  @default(true)
  mealUpdates   Boolean  @default(true)
  memberActivity Boolean @default(true)
  joinRequests  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group         Room    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

/// MEAL SETTINGS MODEL (Admin controls)
model MealSettings {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId                String   @db.ObjectId @unique
  breakfastTime         String   @default("08:00")
  lunchTime             String   @default("13:00")
  dinnerTime            String   @default("20:00")
  autoMealEnabled       Boolean  @default(false)
  mealCutoffTime        String   @default("22:00")
  maxMealsPerDay        Int      @default(3)
  allowGuestMeals       Boolean  @default(true)
  guestMealLimit        Int      @default(5)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  room                  Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

/// AUTO MEAL SETTINGS MODEL (User preferences)
model AutoMealSettings {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  roomId            String   @db.ObjectId
  isEnabled         Boolean  @default(false)
  breakfastEnabled  Boolean  @default(true)
  lunchEnabled      Boolean  @default(true)
  dinnerEnabled     Boolean  @default(true)
  guestMealEnabled  Boolean  @default(false)
  startDate         DateTime @default(now())
  endDate           DateTime?
  excludedDates     String[] // Store dates as strings
  excludedMealTypes MealType[] // Store meal types to exclude
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room              Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

/// ACCOUNT TRANSACTION MODEL
model AccountTransaction {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId 
  targetUserId String   @db.ObjectId  
  roomId       String   @db.ObjectId
  amount       Float
  type         String   @default("PAYMENT") // PAYMENT, ADJUSTMENT, REFUND
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String   @db.ObjectId

  // Relations
  user         User     @relation("TransactionUser", fields: [userId], references: [id], onDelete: Cascade)
  targetUser   User     @relation("TransactionTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  creator      User     @relation("TransactionCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([targetUserId])
  @@index([createdAt])
  @@index([type])
}

